generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String?           @unique @db.VarChar(255)
  password            String?           @db.VarChar(255)
  is_email_verified   Boolean           @default(false)
  two_factor_enabled  Boolean           @default(false)
  role                Role              @default(user)
  blockedBy           Blocks[]          @relation("BlockedUsers")
  blockedUsers        Blocks[]          @relation("UserBlocks")
  comment_likes       CommentLikes[]
  comments            Comments[]
  conversationAsUser1 Conversations[]   @relation("User1")
  conversationAsUser2 Conversations[]   @relation("User2")
  initiators          Friends[]         @relation("InitiatorUser")
  targets             Friends[]         @relation("TargetUser")
  messages            Messages[]
  notifications       Notifications[]
  oauth_account       OAuthAccounts?
  post_image_likes    PostImageLikes[]
  post_image_shares   PostImageShares[]
  post_likes          PostLikes[]
  post_tags           PostTags[]
  post_video_likes    PostVideoLikes[]
  post_video_shares   PostVideoShares[]
  posts               Posts[]
  stories             Stories[]
  story_views         StoryViews[]
  devices             UserDevices[]
  educations          UserEducations[]
  profile             UserProfiles?
  sessions            UserSessions[]
  socials             UserSocials[]
  work_places         UserWorkPlaces[]
}

model UserProfiles {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone_number    String        @unique @db.VarChar(255)
  gender          Gender
  dob             DateTime
  address         String
  avatar_url      String
  username        String        @unique @db.VarChar(255)
  bio             String?
  status          ProfileStatus @default(active)
  nickname        String?       @db.VarChar(50)
  cover_photo_url String
  user_id         String        @unique @db.Uuid
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now())
  last_name       String
  first_name      String
  user            Users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model OAuthAccounts {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  provider    OAuthProvider
  provider_id String?       @unique
  user_id     String        @unique @db.Uuid
  user        Users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserEducations {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_name String
  major       String
  degree      String
  start_date  DateTime
  end_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  user_id     String    @db.Uuid
  user        Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserSocials {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  social_name String @db.VarChar(255)
  social_link String
  user_id     String @db.Uuid
  user        Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([social_name, user_id])
}

model UserWorkPlaces {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_name String    @db.VarChar(255)
  position     String
  start_date   DateTime
  end_date     DateTime?
  user_id      String    @db.Uuid
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  user         Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserDevices {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  finger_print  String
  device_name   String   @db.VarChar(255)
  user_agent    String
  ip_address    String
  location      String
  is_trusted    Boolean  @default(true)
  last_login_at DateTime @default(now())
  user_id       String   @db.Uuid
  user          Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([finger_print, user_id])
}

model UserSessions {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  refresh_token String
  finger_print  String
  user_agent    String
  ip_address    String
  device_name   String
  user_id       String        @db.Uuid
  expires_at    DateTime      @db.Timestamp(6)
  last_login_at DateTime      @default(now()) @db.Timestamp(6)
  status        SessionStatus @default(active)
  user          Users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, finger_print])
}

model HashTags {
  id    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String         @unique @db.VarChar(255)
  posts PostHashTags[]
}

model Posts {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  privacy        PostPrivacies
  total_likes    Int            @default(0)
  total_comments Int            @default(0)
  total_shares   Int            @default(0)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
  deleted_at     DateTime?
  user_id        String         @db.Uuid
  group_id       String?        @db.Uuid
  parent_post_id String?        @db.Uuid
  comments       Comments[]
  contents       PostContents[]
  hashtags       PostHashTags[]
  images         PostImages[]
  likes          PostLikes[]
  tags           PostTags[]
  videos         PostVideos[]
  user           Users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parent         Posts?         @relation("PostShares", fields: [parent_post_id], references: [id])
  shares         Posts[]        @relation("PostShares")
}

model PostLikes {
  post_id  String   @db.Uuid
  user_id  String   @db.Uuid
  liked_at DateTime @default(now())
  post     Posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user     Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([post_id, user_id])
  @@unique([post_id, user_id])
}

model PostContents {
  id       String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content  String
  type     PostContentType     @default(text)
  language PostContentLanguage @default(en)
  post_id  String              @db.Uuid
  post     Posts               @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model PostVideos {
  id             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  video_url      String
  total_likes    Int               @default(0)
  total_comments Int               @default(0)
  total_shares   Int               @default(0)
  post_id        String            @db.Uuid
  comments       Comments[]
  likes          PostVideoLikes[]
  shares         PostVideoShares[]
  post           Posts             @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model PostVideoLikes {
  post_video_id String     @db.Uuid
  user_id       String     @db.Uuid
  liked_at      DateTime   @default(now())
  post_video    PostVideos @relation(fields: [post_video_id], references: [id], onDelete: Cascade)
  user          Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([post_video_id, user_id])
}

model PostVideoShares {
  post_video_id String     @db.Uuid
  user_id       String     @db.Uuid
  shared_at     DateTime   @default(now())
  post_video    PostVideos @relation(fields: [post_video_id], references: [id], onDelete: Cascade)
  user          Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([post_video_id, user_id])
}

model PostImages {
  id             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image_url      String
  total_likes    Int               @default(0)
  total_comments Int               @default(0)
  total_shares   Int               @default(0)
  post_id        String            @db.Uuid
  comments       Comments[]
  likes          PostImageLikes[]
  shares         PostImageShares[]
  post           Posts             @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model PostImageLikes {
  post_image_id String     @db.Uuid
  user_id       String     @db.Uuid
  liked_at      DateTime   @default(now())
  post_image    PostImages @relation(fields: [post_image_id], references: [id], onDelete: Cascade)
  user          Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([post_image_id, user_id])
}

model PostImageShares {
  post_image_id String     @db.Uuid
  user_id       String     @db.Uuid
  shared_at     DateTime   @default(now())
  post_image    PostImages @relation(fields: [post_image_id], references: [id], onDelete: Cascade)
  user          Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([post_image_id, user_id])
}

model PostHashTags {
  post_id    String   @db.Uuid
  hashtag_id String   @db.Uuid
  hashtag    HashTags @relation(fields: [hashtag_id], references: [id], onDelete: Cascade)
  post       Posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([post_id, hashtag_id])
}

model PostTags {
  post_id        String @db.Uuid
  tagged_user_id String @db.Uuid
  post           Posts  @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user           Users  @relation(fields: [tagged_user_id], references: [id], onDelete: Cascade)

  @@id([post_id, tagged_user_id])
}

model Comments {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content           String?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @default(now())
  deleted_at        DateTime?
  post_id           String?        @db.Uuid
  post_video_id     String?        @db.Uuid
  post_image_id     String?        @db.Uuid
  parent_comment_id String?        @db.Uuid
  user_id           String         @db.Uuid
  comment_likes     CommentLikes[]
  comment           Comments?      @relation("CommentReplies", fields: [parent_comment_id], references: [id])
  comments          Comments[]     @relation("CommentReplies")
  post              Posts?         @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_image        PostImages?    @relation(fields: [post_image_id], references: [id], onDelete: Cascade)
  post_video        PostVideos?    @relation(fields: [post_video_id], references: [id], onDelete: Cascade)
  user              Users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model CommentLikes {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now())
  user_id    String   @db.Uuid
  comment_id String   @db.Uuid
  comment    Comments @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, comment_id])
}

model Stories {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content_type ContentStoryType @default(text)
  content_url  String?
  text_content String?
  created_at   DateTime         @default(now())
  expires_at   DateTime
  user_id      String           @db.Uuid
  user         Users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  views        StoryViews[]
}

model StoryViews {
  story_id  String  @db.Uuid
  viewer_id String  @db.Uuid
  story     Stories @relation(fields: [story_id], references: [id], onDelete: Cascade)
  viewer    Users   @relation(fields: [viewer_id], references: [id], onDelete: Cascade)

  @@id([story_id, viewer_id])
  @@unique([story_id, viewer_id])
}

model Notifications {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         NotificationType
  messages     String
  metadata     Json?
  is_read      Boolean          @default(false)
  created_at   DateTime         @default(now())
  recipient_id String           @db.Uuid
  recipient    Users            @relation(fields: [recipient_id], references: [id], onDelete: Cascade)
}

model Friends {
  friendship_status FriendShipStatus @default(pending)
  initiated_at      DateTime         @default(now())
  confirmed_at      DateTime?
  initiator_id      String           @db.Uuid
  target_id         String           @db.Uuid
  initiator         Users            @relation("InitiatorUser", fields: [initiator_id], references: [id], onDelete: Cascade)
  target            Users            @relation("TargetUser", fields: [target_id], references: [id], onDelete: Cascade)

  @@id([initiator_id, target_id])
}

model Blocks {
  user_id         String   @db.Uuid
  blocked_user_id String   @db.Uuid
  blocked_at      DateTime @default(now())
  blockedUser     Users    @relation("BlockedUsers", fields: [blocked_user_id], references: [id], onDelete: Cascade)
  user            Users    @relation("UserBlocks", fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, blocked_user_id])
  @@unique([user_id, blocked_user_id])
}

model Conversations {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime   @default(now())
  user_1_id  String     @db.Uuid
  user_2_id  String     @db.Uuid
  messages   Messages[]

  user_1 Users @relation("User1", fields: [user_1_id], references: [id], onDelete: Cascade)
  user_2 Users @relation("User2", fields: [user_2_id], references: [id], onDelete: Cascade)

  @@unique([user_1_id, user_2_id])
}

model Messages {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content             String
  created_at          DateTime      @default(now())
  updated_at          DateTime      @default(now())
  deleted_at          DateTime?
  conversation_id     String        @db.Uuid
  reply_to_message_id String?       @db.Uuid
  user_id             String        @db.Uuid
  conversation        Conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  parent_message      Messages?     @relation("MessageReplies", fields: [reply_to_message_id], references: [id], onDelete: Cascade)
  replies             Messages[]    @relation("MessageReplies")
  user                Users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum Role {
  admin
  user
}

enum GroupMemberRole {
  member
  censor
  owner
}

enum Gender {
  male
  female
  other
}

enum ProfileStatus {
  inactive
  active
}

enum OAuthProvider {
  google
  facebook
  local
}

enum PostPrivacies {
  public
  only_friend
  only_me
}

enum PostContentType {
  text
  link
}

enum PostContentLanguage {
  vn
  en
}

enum GroupJoinRequestsStatus {
  pending
  approved
  rejected
}

enum ContentStoryType {
  text
  image
}

enum NotificationType {
  friend_request
  friend_request_accepted
  friend_request_rejected
  post_liked
  post_commented
  comment_replied
  post_shared
  tagged_in_post
  tagged_in_comment
  group_invite
  group_join_request
  group_role_changed
  followed_you
  birthday_reminder
  system_announcement
}

enum FriendShipStatus {
  accepted
  rejected
  pending
}

enum MessageType {
  text
  file
}

enum SessionStatus {
  active
  inactive
  expired
}
